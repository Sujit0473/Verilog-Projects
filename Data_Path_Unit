// data_path.v
`timescale 1ns / 1ps
module data_path(
    input clk,
    input rst,
    input [4:0] read_reg_num1,
    input [4:0] read_reg_num2,
    input [4:0] write_reg_num1,
    input [5:0] alu_control,
    input jump,
    input beq_control,
    input zero_flag,
    input reg_dst,
    input mem_to_reg,
    input bneq_control,
    input [31:0] imm_val,
    input [4:0] shamt,
    input lb,
    input sw,
    input bgeq_control,
    input blt_control,
    input lui_control,
    input [31:0] imm_val_lui,
    input [31:0] imm_val_jump,
    input [31:0] return_address,
    output [4:0] read_data_addr_dm,
    output beq,
    output bneq,
    output bge,
    output blt
    );

    reg [31:0] pc_current;
    wire [31:0] pc_next;

    wire [31:0] read_data1;
    wire [31:0] read_data2;
    wire [31:0] alu_result;
    wire [4:0] read_data_addr_dm_2;
    wire [31:0] data_out_2_dm;

    register_file rfu (
        clk,
        rst,
        read_reg_num1,
        read_reg_num2,
        write_reg_num1,
        alu_result,
        lb,
        lui_control,
        imm_val_lui,
        return_address,
        jump,
        read_data1,
        read_data2,
        read_data_addr_dm_2,
        data_out_2_dm,
        sw
    );

    alu alu_unit (
        read_data1,
        read_data2,
        alu_control,
        imm_val,
        shamt,
        alu_result
    );

    data_memory dmu (
        clk,
        rst,
        imm_val[4:0],
        data_out_2_dm,
        sw,
        imm_val[4:0],
        alu_result
    );

    initial begin
        pc_current <= 32'd0;
    end

    always @(posedge clk) begin
        if (rst)
            pc_current <= 0;
        else
            pc_current <= pc_next;
    end

    assign pc_next = pc_current + 4;

    assign beq = (alu_result == 1 && beq_control == 1) ? 1 : 0;
    assign bneq = (alu_result == 1 && bneq_control == 1) ? 1 : 0;
    assign bge = (alu_result == 1 && bgeq_control == 1) ? 1 : 0;
    assign blt = (alu_result == 1 && blt_control == 1) ? 1 : 0;

    assign read_data_addr_dm = read_data_addr_dm_2;

endmodule
