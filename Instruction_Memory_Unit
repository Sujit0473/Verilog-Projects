// instruction_memory.v
`timescale 1ns / 1ps
module instruction_memory(
    input clk,
    input [31:0] pc,
    input reset,
    output [31:0] instruction_code
);

    reg [7:0] memory [0:127]; // 128 bytes (32 instructions)

    assign instruction_code = {memory[pc+3], memory[pc+2], memory[pc+1], memory[pc]};

    always @(posedge clk) begin
        if (reset) begin
            // Existing instructions
            memory[0]  = 8'h33; memory[1]  = 8'h03; memory[2]  = 8'h94; memory[3]  = 8'h00; // add
            memory[4]  = 8'hb3; memory[5]  = 8'h00; memory[6]  = 8'h01; memory[7]  = 8'h80; // sub
            memory[8]  = 8'h33; memory[9]  = 8'h91; memory[10] = 8'h20; memory[11] = 8'h00; // sll
            memory[12] = 8'hb3; memory[13] = 8'h4a; memory[14] = 8'hc5; memory[15] = 8'h00; // xor
            memory[16] = 8'h33; memory[17] = 8'h23; memory[18] = 8'h52; memory[19] = 8'h00; // slt
            memory[20] = 8'h33; memory[21] = 8'hb3; memory[22] = 8'h83; memory[23] = 8'h00; // sltu
            memory[24] = 8'hb3; memory[25] = 8'h68; memory[26] = 8'hf7; memory[27] = 8'h00; // and
            memory[28] = 8'hb3; memory[29] = 8'h7f; memory[30] = 8'hd6; memory[31] = 8'h00; // or
            memory[32] = 8'hb3; memory[33] = 8'h59; memory[34] = 8'ha0; memory[35] = 8'h00;
            memory[36] = 8'hb3; memory[37] = 8'h6e; memory[38] = 8'ha1; memory[39] = 8'h20;
            memory[40] = 8'h26; memory[41] = 8'hc7; memory[42] = 8'hf2; memory[43] = 8'h03;
            memory[44] = 8'h93; memory[45] = 8'h20; memory[46] = 8'ha1; memory[47] = 8'h00;
            memory[48] = 8'h93; memory[49] = 8'h50; memory[50] = 8'h31; memory[51] = 8'h00;
            memory[52] = 8'h93; memory[53] = 8'h60; memory[54] = 8'hf1; memory[55] = 8'h00;
            memory[56] = 8'h93; memory[57] = 8'h70; memory[58] = 8'hf1; memory[59] = 8'h00;
            memory[60] = 8'h83; memory[61] = 8'h02; memory[62] = 8'h43; memory[63] = 8'h00;
            memory[64] = 8'h23; memory[65] = 8'h28; memory[66] = 8'h73; memory[67] = 8'h00;
            memory[68] = 8'h63; memory[69] = 8'h00; memory[70] = 8'h41; memory[71] = 8'h00;
            memory[72] = 8'h63; memory[73] = 8'h94; memory[74] = 8'h20; memory[75] = 8'h00;
            memory[80] = 8'h63; memory[81] = 8'ha4; memory[82] = 8'h41; memory[83] = 8'h00;
            memory[88] = 8'hb7; memory[89] = 8'h52; memory[90] = 8'h34; memory[91] = 8'h12;
            memory[92] = 8'hef; memory[93] = 8'h80; memory[94] = 8'h00; memory[95] = 8'h00;
        end
    end

endmodule
