// control_unit.v
`timescale 1ns / 1ps
module control_unit(
    input wire reset,
    input wire [6:0] func7,
    input wire [2:0] func3,
    input wire [6:0] opcode,
    output reg [5:0] alu_control,
    output reg lb,
    output reg mem_to_reg,
    output reg beq_control,
    output reg bneq_control,
    output reg bgeq_control,
    output reg blt_control,
    output reg jump,
    output reg sw,
    output reg lui_control
);

    always @(*) begin
        alu_control   = 6'b000000;
        lb            = 0;
        mem_to_reg    = 0;
        beq_control   = 0;
        bneq_control  = 0;
        bgeq_control  = 0;
        blt_control   = 0;
        jump          = 0;
        sw            = 0;
        lui_control   = 0;

        if (reset) begin
            alu_control = 6'b000000;
        end else begin
            case (opcode)
                7'b0110011: begin // R-type instructions
                    case (func3)
                        3'b000: alu_control = (func7 == 7'b0000000) ? 6'b000001 : 6'b000010; // add / sub
                        3'b001: if (func7 == 7'b0000000) alu_control = 6'b000011;             // sll
                        3'b010: if (func7 == 7'b0000000) alu_control = 6'b000100;             // slt
                        3'b011: if (func7 == 7'b0000000) alu_control = 6'b000101;             // sltu
                        3'b100: if (func7 == 7'b0000000) alu_control = 6'b000110;             // xor
                        3'b101: alu_control = (func7 == 7'b0000000) ? 6'b000111 : 6'b001000;  // srl / sra
                        3'b110: if (func7 == 7'b0000000) alu_control = 6'b001001;             // or
                        3'b111: if (func7 == 7'b0000000) alu_control = 6'b001010;             // AND
                    endcase
                end
                7'b0010011: begin
                    case (func3)
                        3'b000: alu_control = 6'b001011; // addi
                        3'b001: alu_control = 6'b001100; // slli
                        3'b010: alu_control = 6'b001101; // slti
                        3'b011: alu_control = 6'b001110; // sltiu
                        3'b100: alu_control = 6'b001111; // xori
                        3'b101: alu_control = 6'b010000; // srli/srai
                        3'b110: alu_control = 6'b010001; // ori
                        3'b111: alu_control = 6'b010010; // andi
                    endcase
                end
                7'b0000011: begin
                    mem_to_reg = 1;
                    case (func3)
                        3'b000: begin alu_control = 6'b010011; lb = 1; end // lb
                        3'b001: alu_control = 6'b010100; // lh
                        3'b010: alu_control = 6'b010101; // lw
                        3'b011: alu_control = 6'b010110; // lbu
                        3'b100: alu_control = 6'b010111; // lhu
                    endcase
                end
                7'b0100011: begin
                    sw = 1;
                    case (func3)
                        3'b000: alu_control = 6'b011000; // sb
                        3'b001: alu_control = 6'b011001; // sh
                        3'b010: alu_control = 6'b011010; // sw
                    endcase
                end
                7'b1100011: begin
                    case (func3)
                        3'b000: begin alu_control = 6'b011011; beq_control = 1; end // beq
                        3'b001: begin alu_control = 6'b011100; bneq_control = 1; end // bne
                        3'b100: begin alu_control = 6'b100000; blt_control = 1; end // blt
                        3'b101: begin alu_control = 6'b011111; bgeq_control = 1; end // bge
                        3'b110: alu_control = 6'b100000; // bltu
                    endcase
                end
                7'b0110111: begin
                    alu_control = 6'b100001;
                    lui_control = 1;
                end
                7'b1101111: begin
                    alu_control = 6'b100010;
                    jump = 1;
                end
            endcase
        end
    end
endmodule
