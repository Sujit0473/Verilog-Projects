// instruction_fetch_unit.v
`timescale 1ns / 1ps
module instruction_fetch_unit(
    input clk,
    input reset,
    input [31:0] imm_address,
    input [31:0] imm_address_jump,
    input beq,
    input bneq,
    input bge,
    input blt,
    input jump,
    output reg [31:0] pc,
    output reg [31:0] current_pc
);

    always @(posedge clk or posedge reset) begin
        if (reset)
            pc <= 0;
        else if (jump)
            pc <= pc + imm_address_jump;
        else if (beq || bneq || bge || blt)
            pc <= pc + imm_address;
        else
            pc <= pc + 4;
    end

    always @(posedge clk or posedge reset) begin
        if (reset)
            current_pc <= 0;
        else if (jump)
            current_pc <= pc + 4;
        else
            current_pc <= current_pc;
    end

endmodule
